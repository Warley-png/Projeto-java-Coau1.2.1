
package br.com.coau.telas;

import br.com.coau.persistence.Cliente;
import br.com.coau.persistence.ClienteDAO;
import br.com.coau.persistence.ClienteIMPL;
import br.com.coau.persistence.JPAUtil;

import br.com.coau.persistence.Livros;
import br.com.coau.persistence.LivrosDAO;
import br.com.coau.persistence.LivrosIMPL;
import br.com.coau.telas.TelaListadeLivroEmprestados;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Warley
 */
public class TelaAlugarLivro extends javax.swing.JInternalFrame {

    private TelaListadeLivroEmprestados telaListadeLivroEmprestados;

    
    public TelaAlugarLivro() {
        initComponents();
        atualizarTblClientes();
        listarTabela();
        listaLivros();
        listarTabela();
    }

    public TelaAlugarLivro(TelaListadeLivroEmprestados telaListadeLivroEmprestados) {
        this.telaListadeLivroEmprestados = telaListadeLivroEmprestados;
        initComponents();
        atualizarTblClientes();
        listarTabela();
        listaLivros();
        listarTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLivros = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        btnDevolver = new javax.swing.JButton();
        btnAlugar = new javax.swing.JButton();
        lblLivros = new javax.swing.JLabel();
        lblLista = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Tela Alugar Livro");
        setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Logotipo COAU1.png"))); // NOI18N

        tblLivros = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;

            }

        };
        tblLivros.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        tblLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Título", "Autor", "Disponível"
            }
        ));
        tblLivros.setFocusable(false);
        tblLivros.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblLivros);

        tblClientes = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;

            }

        };
        tblClientes.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "Telefone"
            }
        ));
        tblClientes.setFocusable(false);
        tblClientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblClientes);

        btnDevolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Devolver.png"))); // NOI18N
        btnDevolver.setToolTipText("Devolver Livro");
        btnDevolver.setPreferredSize(new java.awt.Dimension(80, 80));
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });

        btnAlugar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/Alugar.png"))); // NOI18N
        btnAlugar.setToolTipText("Alugar Livro");
        btnAlugar.setPreferredSize(new java.awt.Dimension(80, 80));
        btnAlugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlugarActionPerformed(evt);
            }
        });

        lblLivros.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        lblLivros.setForeground(new java.awt.Color(187, 170, 48));
        lblLivros.setText("Lista Livros");

        lblLista.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        lblLista.setForeground(new java.awt.Color(187, 170, 48));
        lblLista.setText("Lista Clientes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(btnAlugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(132, 132, 132))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(lblLivros)
                        .addGap(222, 222, 222)
                        .addComponent(lblLista))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLivros)
                    .addComponent(lblLista))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAlugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        setBounds(0, 0, 650, 500);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlugarActionPerformed
     
        int selectedRowLivro = tblLivros.getSelectedRow();
        int selectedRowCliente = tblClientes.getSelectedRow();

        if (selectedRowLivro == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um Livro para alugar.");
            return;
        }
        if (selectedRowCliente == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um Cliente para alugar o livro.");
            return;
        }

        long livroId = (long) tblLivros.getModel().getValueAt(selectedRowLivro, 0);
        long clienteId = (long) tblClientes.getModel().getValueAt(selectedRowCliente, 0);

        LivrosDAO livro = new LivrosIMPL(JPAUtil.getEntityManager());
        Livros livroSelecionado = livro.buscarLivroPorId(livroId);
        
        if (livroSelecionado == null || !livroSelecionado.isDisponivelliv()) {
            JOptionPane.showMessageDialog(this, "Este livro já está alugado.");
            return;
        }

        boolean sucesso = livro.alugarLivro(clienteId, livroId);
        if (sucesso) {
            JOptionPane.showMessageDialog(this, "Livro alugado com sucesso!");
            atualizarTabela();
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao alugar o livro.");
        }

    }//GEN-LAST:event_btnAlugarActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
        
        int selectedRowLivro = tblLivros.getSelectedRow();

        if (selectedRowLivro == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um Livro para devolver.");
            return;
        }

        long livroId = (long) tblLivros.getModel().getValueAt(selectedRowLivro, 0);

        LivrosDAO livro = new LivrosIMPL(JPAUtil.getEntityManager());
        boolean sucesso = livro.devolverLivro(livroId);
        if (sucesso) {
            JOptionPane.showMessageDialog(this, "Livro devolvido com sucesso!");
            atualizarTabela();
            if (telaListadeLivroEmprestados != null) {
                telaListadeLivroEmprestados.atualizarListaEmprestados();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Não ha aluguel ativo para este livro.");
        }
    }//GEN-LAST:event_btnDevolverActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlugar;
    private javax.swing.JButton btnDevolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblLista;
    private javax.swing.JLabel lblLivros;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTable tblLivros;
    // End of variables declaration//GEN-END:variables
 private void atualizarTblClientes() {
   ClienteDAO cliente = new ClienteIMPL(JPAUtil.getEntityManager()) ;
    List<Cliente> clientes = cliente.listarClientes();

    DefaultTableModel model = (DefaultTableModel) tblClientes.getModel();
    model.setRowCount(0);

    for (Cliente c : clientes) {
        model.addRow(new Object[]{
            c.getIdcli(),
            c.getNomecli(),
            c.getFonecli()
        });
    }
}

    private void listarTabela() {
        atualizarTblClientes();
    }

    private void listaLivros() {
         LivrosDAO livro = new LivrosIMPL(JPAUtil.getEntityManager()) ;
        List<Livros> listar = livro.listarLivros();
        DefaultTableModel tabela = (DefaultTableModel) tblLivros.getModel();
        tabela.setRowCount(0);
        if (listar != null) {
            for (Livros l : listar) {
                tabela.addRow(new Object[]{
                    l.getIdliv(),
                    l.getNomeliv(),
                    l.getAutorliv(),
                    l.isDisponivelliv() ? "Livre" : "Emprestado"
                });
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nenhum Livro encontrado !");
        }
    }

    void atualizarTabela() {
        listaLivros();
    }
}
